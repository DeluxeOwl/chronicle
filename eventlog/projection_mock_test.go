// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eventlog_test

import (
	"context"
	"github.com/DeluxeOwl/chronicle/event"
	"sync"
)

// SyncProjectionMock is a mock implementation of event.SyncProjection.
//
//	func TestSomethingThatUsesSyncProjection(t *testing.T) {
//
//		// make and configure a mocked event.SyncProjection
//		mockedSyncProjection := &SyncProjectionMock{
//			HandleFunc: func(ctx context.Context, tx TX, records []*event.Record) error {
//				panic("mock out the Handle method")
//			},
//			MatchesEventFunc: func(eventName string) bool {
//				panic("mock out the MatchesEvent method")
//			},
//		}
//
//		// use mockedSyncProjection in code that requires event.SyncProjection
//		// and then make assertions.
//
//	}
type SyncProjectionMock[TX any] struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context, tx TX, records []*event.Record) error

	// MatchesEventFunc mocks the MatchesEvent method.
	MatchesEventFunc func(eventName string) bool

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx TX
			// Records is the records argument value.
			Records []*event.Record
		}
		// MatchesEvent holds details about calls to the MatchesEvent method.
		MatchesEvent []struct {
			// EventName is the eventName argument value.
			EventName string
		}
	}
	lockHandle       sync.RWMutex
	lockMatchesEvent sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *SyncProjectionMock[TX]) Handle(ctx context.Context, tx TX, records []*event.Record) error {
	if mock.HandleFunc == nil {
		panic("SyncProjectionMock.HandleFunc: method is nil but SyncProjection.Handle was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Tx      TX
		Records []*event.Record
	}{
		Ctx:     ctx,
		Tx:      tx,
		Records: records,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(ctx, tx, records)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//
//	len(mockedSyncProjection.HandleCalls())
func (mock *SyncProjectionMock[TX]) HandleCalls() []struct {
	Ctx     context.Context
	Tx      TX
	Records []*event.Record
} {
	var calls []struct {
		Ctx     context.Context
		Tx      TX
		Records []*event.Record
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}

// MatchesEvent calls MatchesEventFunc.
func (mock *SyncProjectionMock[TX]) MatchesEvent(eventName string) bool {
	if mock.MatchesEventFunc == nil {
		panic("SyncProjectionMock.MatchesEventFunc: method is nil but SyncProjection.MatchesEvent was just called")
	}
	callInfo := struct {
		EventName string
	}{
		EventName: eventName,
	}
	mock.lockMatchesEvent.Lock()
	mock.calls.MatchesEvent = append(mock.calls.MatchesEvent, callInfo)
	mock.lockMatchesEvent.Unlock()
	return mock.MatchesEventFunc(eventName)
}

// MatchesEventCalls gets all the calls that were made to MatchesEvent.
// Check the length with:
//
//	len(mockedSyncProjection.MatchesEventCalls())
func (mock *SyncProjectionMock[TX]) MatchesEventCalls() []struct {
	EventName string
} {
	var calls []struct {
		EventName string
	}
	mock.lockMatchesEvent.RLock()
	calls = mock.calls.MatchesEvent
	mock.lockMatchesEvent.RUnlock()
	return calls
}

package encoding

import (
	"encoding/json"
	"fmt"

	"google.golang.org/protobuf/proto"
)

// Codec is a convenience interface that combines both encoding and
// decoding capabilities.
type Codec interface {
	Encoder
	Decoder
}

// Encoder is an interface for types that can convert a Go value
// (like an event struct) into a byte slice for storage or transmission.
//
// Usage:
//
//	var encoder Encoder = NewJSONB()
//	data, err := encoder.Encode(myEvent)
//
// Returns a byte slice representing the encoded value and an error if the encoding fails.
type Encoder interface {
	Encode(v any) ([]byte, error)
}

// Decoder is an interface for types that can convert a byte slice
// back into a Go value (like an event struct).
//
// Usage:
//
//	var decoder Decoder = NewJSONB()
//	eventBytes := []byte(`{"amount": 100}`)
//	var moneyDepositedEvent MoneyDeposited
//	err := decoder.Decode(eventBytes, &moneyDepositedEvent)
//
// Returns an error if decoding fails. The target `v` must be a pointer.
type Decoder interface {
	Decode(data []byte, v any) error
}

// EncoderFunc is a function type that matches the signature of the
// Codec.Encode method.
type EncoderFunc = func(v any) ([]byte, error)

// DecoderFunc is a function type that matches the signature of the
// Codec.Decode method.
type DecoderFunc = func(data []byte, v any) error

var (
	_ Codec = (*Generic)(nil)
	_ Codec = (*JSONB)(nil)
	_ Codec = (*Protobuf)(nil)
)

// Generic provides a flexible, function-based implementation of the Codec interface.
// It allows you to create a custom codec by simply providing the encoding and
// decoding functions, without needing to define a new struct.
//
// Usage:
//
//	// Create a codec using the standard library's JSON functions.
//	customCodec := NewGeneric(json.Marshal, json.Unmarshal)
type Generic struct {
	encode EncoderFunc
	decode DecoderFunc
}

// NewGeneric creates a new Generic codec from the provided
// encode and decode functions.
func NewGeneric(
	encode EncoderFunc,
	decode DecoderFunc,
) *Generic {
	return &Generic{
		encode: encode,
		decode: decode,
	}
}

// Encode calls the underlying encode function.
func (gb *Generic) Encode(v any) ([]byte, error) {
	return gb.encode(v)
}

// Decoder calls the underlying decode function.
func (gb *Generic) Decode(data []byte, v any) error {
	return gb.decode(data, v)
}

// JSONB (JSON Binary) is a concrete implementation of Codec that uses the standard
// library's `encoding/json` package. This is the default codec used
// throughout the framework.
type JSONB struct{}

// NewJSONB creates a new JSONB (JSON Binary) codec.
func NewJSONB() *JSONB {
	return &JSONB{}
}

var DefaultJSONB Codec = &JSONB{}

// Encode uses json.Marshal to encode the value.
func (jb *JSONB) Encode(v any) ([]byte, error) {
	return json.Marshal(v)
}

// Decoder uses json.Unmarshal to decode the data into the value.
func (jb *JSONB) Decode(data []byte, v any) error {
	return json.Unmarshal(data, v)
}

// Protobuf is a concrete implementation of Codec for Google's Protocol Buffers.
// It uses the `google.golang.org/protobuf/proto` package for its operations.
//
// Any value passed to its methods for encoding or decoding *must*
// implement the `proto.Message` interface. This interface is automatically
// implemented by structs generated by the protoc compiler.
//
// Usage:
//
//	// Assuming `pb` is your generated protobuf package.
//	var codec Codec = NewProtobuf()
//
//	// Encoding
//	originalMsg := &pb.MyMessage{Id: "123", Body: "hello"}
//	data, err := codec.Encode(originalMsg)
//
//	// Decoding
//	var newMsg pb.MyMessage
//	err = codec.Decode(data, &newMsg)
type Protobuf struct{}

// NewProtobuf creates a new Protobuf codec.
func NewProtobuf() *Protobuf {
	return &Protobuf{}
}

// Encode converts a Protocol Buffers message into its binary wire format
// using `proto.Marshal`.
//
// The provided value `v` must implement the `proto.Message` interface. It will
// return an error if this is not the case.
func (ps *Protobuf) Encode(v any) ([]byte, error) {
	msg, ok := v.(proto.Message)
	if !ok {
		return nil, fmt.Errorf("value of type %T does not implement proto.Message", v)
	}

	return proto.Marshal(msg)
}

// Decoder converts a byte slice from the Protocol Buffers wire format
// into a message struct using `proto.Unmarshal`.
//
// The provided value `v` must be a pointer to a struct that implements the
// `proto.Message` interface (e.g., `&MyProtoMessage{}`). It will return an
// error if this is not the case.
func (ps *Protobuf) Decode(data []byte, v any) error {
	msg, ok := v.(proto.Message)
	if !ok {
		return fmt.Errorf("value of type %T does not implement proto.Message", v)
	}

	return proto.Unmarshal(data, msg)
}

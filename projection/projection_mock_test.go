// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package projection_test

import (
	"context"
	"github.com/DeluxeOwl/chronicle/event"
	"github.com/DeluxeOwl/chronicle/version"
	"sync"
)

// CheckpointerMock is a mock implementation of projection.Checkpointer.
//
//	func TestSomethingThatUsesCheckpointer(t *testing.T) {
//
//		// make and configure a mocked projection.Checkpointer
//		mockedCheckpointer := &CheckpointerMock{
//			GetFunc: func(ctx context.Context, projectionType string) (version.Version, error) {
//				panic("mock out the Get method")
//			},
//			SetFunc: func(ctx context.Context, projectionType string, v version.Version) error {
//				panic("mock out the Set method")
//			},
//		}
//
//		// use mockedCheckpointer in code that requires projection.Checkpointer
//		// and then make assertions.
//
//	}
type CheckpointerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, projectionType string) (version.Version, error)

	// SetFunc mocks the Set method.
	SetFunc func(ctx context.Context, projectionType string, v version.Version) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectionType is the projectionType argument value.
			ProjectionType string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectionType is the projectionType argument value.
			ProjectionType string
			// V is the v argument value.
			V version.Version
		}
	}
	lockGet sync.RWMutex
	lockSet sync.RWMutex
}

// Get calls GetFunc.
func (mock *CheckpointerMock) Get(ctx context.Context, projectionType string) (version.Version, error) {
	if mock.GetFunc == nil {
		panic("CheckpointerMock.GetFunc: method is nil but Checkpointer.Get was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		ProjectionType string
	}{
		Ctx:            ctx,
		ProjectionType: projectionType,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, projectionType)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedCheckpointer.GetCalls())
func (mock *CheckpointerMock) GetCalls() []struct {
	Ctx            context.Context
	ProjectionType string
} {
	var calls []struct {
		Ctx            context.Context
		ProjectionType string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *CheckpointerMock) Set(ctx context.Context, projectionType string, v version.Version) error {
	if mock.SetFunc == nil {
		panic("CheckpointerMock.SetFunc: method is nil but Checkpointer.Set was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		ProjectionType string
		V              version.Version
	}{
		Ctx:            ctx,
		ProjectionType: projectionType,
		V:              v,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(ctx, projectionType, v)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedCheckpointer.SetCalls())
func (mock *CheckpointerMock) SetCalls() []struct {
	Ctx            context.Context
	ProjectionType string
	V              version.Version
} {
	var calls []struct {
		Ctx            context.Context
		ProjectionType string
		V              version.Version
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}

// ProjectionMock is a mock implementation of projection.Projection.
//
//	func TestSomethingThatUsesProjection(t *testing.T) {
//
//		// make and configure a mocked projection.Projection
//		mockedProjection := &ProjectionMock{
//			EventNamesFunc: func() []string {
//				panic("mock out the EventNames method")
//			},
//			HandleFunc: func(ctx context.Context, rec event.GlobalRecord) error {
//				panic("mock out the Handle method")
//			},
//		}
//
//		// use mockedProjection in code that requires projection.Projection
//		// and then make assertions.
//
//	}
type ProjectionMock struct {
	// EventNamesFunc mocks the EventNames method.
	EventNamesFunc func() []string

	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context, rec event.GlobalRecord) error

	// calls tracks calls to the methods.
	calls struct {
		// EventNames holds details about calls to the EventNames method.
		EventNames []struct {
		}
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Rec is the rec argument value.
			Rec event.GlobalRecord
		}
	}
	lockEventNames sync.RWMutex
	lockHandle     sync.RWMutex
}

// EventNames calls EventNamesFunc.
func (mock *ProjectionMock) EventNames() []string {
	if mock.EventNamesFunc == nil {
		panic("ProjectionMock.EventNamesFunc: method is nil but Projection.EventNames was just called")
	}
	callInfo := struct {
	}{}
	mock.lockEventNames.Lock()
	mock.calls.EventNames = append(mock.calls.EventNames, callInfo)
	mock.lockEventNames.Unlock()
	return mock.EventNamesFunc()
}

// EventNamesCalls gets all the calls that were made to EventNames.
// Check the length with:
//
//	len(mockedProjection.EventNamesCalls())
func (mock *ProjectionMock) EventNamesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockEventNames.RLock()
	calls = mock.calls.EventNames
	mock.lockEventNames.RUnlock()
	return calls
}

// Handle calls HandleFunc.
func (mock *ProjectionMock) Handle(ctx context.Context, rec event.GlobalRecord) error {
	if mock.HandleFunc == nil {
		panic("ProjectionMock.HandleFunc: method is nil but Projection.Handle was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Rec event.GlobalRecord
	}{
		Ctx: ctx,
		Rec: rec,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(ctx, rec)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//
//	len(mockedProjection.HandleCalls())
func (mock *ProjectionMock) HandleCalls() []struct {
	Ctx context.Context
	Rec event.GlobalRecord
} {
	var calls []struct {
		Ctx context.Context
		Rec event.GlobalRecord
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}

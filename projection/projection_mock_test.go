// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package projection_test

import (
	"context"
	"github.com/DeluxeOwl/chronicle/event"
	"github.com/DeluxeOwl/chronicle/version"
	"sync"
)

// CheckpointerMock is a mock implementation of projection.Checkpointer.
//
//	func TestSomethingThatUsesCheckpointer(t *testing.T) {
//
//		// make and configure a mocked projection.Checkpointer
//		mockedCheckpointer := &CheckpointerMock{
//			GetCheckpointFunc: func(ctx context.Context, projectionName string) (version.Version, error) {
//				panic("mock out the GetCheckpoint method")
//			},
//			SaveCheckpointFunc: func(ctx context.Context, projectionName string, v version.Version) error {
//				panic("mock out the SaveCheckpoint method")
//			},
//		}
//
//		// use mockedCheckpointer in code that requires projection.Checkpointer
//		// and then make assertions.
//
//	}
type CheckpointerMock struct {
	// GetCheckpointFunc mocks the GetCheckpoint method.
	GetCheckpointFunc func(ctx context.Context, projectionName string) (version.Version, error)

	// SaveCheckpointFunc mocks the SaveCheckpoint method.
	SaveCheckpointFunc func(ctx context.Context, projectionName string, v version.Version) error

	// calls tracks calls to the methods.
	calls struct {
		// GetCheckpoint holds details about calls to the GetCheckpoint method.
		GetCheckpoint []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectionName is the projectionName argument value.
			ProjectionName string
		}
		// SaveCheckpoint holds details about calls to the SaveCheckpoint method.
		SaveCheckpoint []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectionName is the projectionName argument value.
			ProjectionName string
			// V is the v argument value.
			V version.Version
		}
	}
	lockGetCheckpoint  sync.RWMutex
	lockSaveCheckpoint sync.RWMutex
}

// GetCheckpoint calls GetCheckpointFunc.
func (mock *CheckpointerMock) GetCheckpoint(ctx context.Context, projectionName string) (version.Version, error) {
	if mock.GetCheckpointFunc == nil {
		panic("CheckpointerMock.GetCheckpointFunc: method is nil but Checkpointer.GetCheckpoint was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		ProjectionName string
	}{
		Ctx:            ctx,
		ProjectionName: projectionName,
	}
	mock.lockGetCheckpoint.Lock()
	mock.calls.GetCheckpoint = append(mock.calls.GetCheckpoint, callInfo)
	mock.lockGetCheckpoint.Unlock()
	return mock.GetCheckpointFunc(ctx, projectionName)
}

// GetCheckpointCalls gets all the calls that were made to GetCheckpoint.
// Check the length with:
//
//	len(mockedCheckpointer.GetCheckpointCalls())
func (mock *CheckpointerMock) GetCheckpointCalls() []struct {
	Ctx            context.Context
	ProjectionName string
} {
	var calls []struct {
		Ctx            context.Context
		ProjectionName string
	}
	mock.lockGetCheckpoint.RLock()
	calls = mock.calls.GetCheckpoint
	mock.lockGetCheckpoint.RUnlock()
	return calls
}

// SaveCheckpoint calls SaveCheckpointFunc.
func (mock *CheckpointerMock) SaveCheckpoint(ctx context.Context, projectionName string, v version.Version) error {
	if mock.SaveCheckpointFunc == nil {
		panic("CheckpointerMock.SaveCheckpointFunc: method is nil but Checkpointer.SaveCheckpoint was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		ProjectionName string
		V              version.Version
	}{
		Ctx:            ctx,
		ProjectionName: projectionName,
		V:              v,
	}
	mock.lockSaveCheckpoint.Lock()
	mock.calls.SaveCheckpoint = append(mock.calls.SaveCheckpoint, callInfo)
	mock.lockSaveCheckpoint.Unlock()
	return mock.SaveCheckpointFunc(ctx, projectionName, v)
}

// SaveCheckpointCalls gets all the calls that were made to SaveCheckpoint.
// Check the length with:
//
//	len(mockedCheckpointer.SaveCheckpointCalls())
func (mock *CheckpointerMock) SaveCheckpointCalls() []struct {
	Ctx            context.Context
	ProjectionName string
	V              version.Version
} {
	var calls []struct {
		Ctx            context.Context
		ProjectionName string
		V              version.Version
	}
	mock.lockSaveCheckpoint.RLock()
	calls = mock.calls.SaveCheckpoint
	mock.lockSaveCheckpoint.RUnlock()
	return calls
}

// ProjectionMock is a mock implementation of projection.Projection.
//
//	func TestSomethingThatUsesProjection(t *testing.T) {
//
//		// make and configure a mocked projection.Projection
//		mockedProjection := &ProjectionMock{
//			EventNamesFunc: func() []string {
//				panic("mock out the EventNames method")
//			},
//			HandleFunc: func(ctx context.Context, rec *event.GlobalRecord) error {
//				panic("mock out the Handle method")
//			},
//			NameFunc: func() string {
//				panic("mock out the Name method")
//			},
//		}
//
//		// use mockedProjection in code that requires projection.Projection
//		// and then make assertions.
//
//	}
type ProjectionMock struct {
	// EventNamesFunc mocks the EventNames method.
	EventNamesFunc func() []string

	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context, rec *event.GlobalRecord) error

	// NameFunc mocks the Name method.
	NameFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// EventNames holds details about calls to the EventNames method.
		EventNames []struct {
		}
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Rec is the rec argument value.
			Rec *event.GlobalRecord
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
	}
	lockEventNames sync.RWMutex
	lockHandle     sync.RWMutex
	lockName       sync.RWMutex
}

// EventNames calls EventNamesFunc.
func (mock *ProjectionMock) EventNames() []string {
	if mock.EventNamesFunc == nil {
		panic("ProjectionMock.EventNamesFunc: method is nil but Projection.EventNames was just called")
	}
	callInfo := struct {
	}{}
	mock.lockEventNames.Lock()
	mock.calls.EventNames = append(mock.calls.EventNames, callInfo)
	mock.lockEventNames.Unlock()
	return mock.EventNamesFunc()
}

// EventNamesCalls gets all the calls that were made to EventNames.
// Check the length with:
//
//	len(mockedProjection.EventNamesCalls())
func (mock *ProjectionMock) EventNamesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockEventNames.RLock()
	calls = mock.calls.EventNames
	mock.lockEventNames.RUnlock()
	return calls
}

// Handle calls HandleFunc.
func (mock *ProjectionMock) Handle(ctx context.Context, rec *event.GlobalRecord) error {
	if mock.HandleFunc == nil {
		panic("ProjectionMock.HandleFunc: method is nil but Projection.Handle was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Rec *event.GlobalRecord
	}{
		Ctx: ctx,
		Rec: rec,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(ctx, rec)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//
//	len(mockedProjection.HandleCalls())
func (mock *ProjectionMock) HandleCalls() []struct {
	Ctx context.Context
	Rec *event.GlobalRecord
} {
	var calls []struct {
		Ctx context.Context
		Rec *event.GlobalRecord
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *ProjectionMock) Name() string {
	if mock.NameFunc == nil {
		panic("ProjectionMock.NameFunc: method is nil but Projection.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//
//	len(mockedProjection.NameCalls())
func (mock *ProjectionMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}

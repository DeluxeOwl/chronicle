// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eventlog_test

import (
	"context"
	"github.com/DeluxeOwl/chronicle/event"
	"sync"
)

// OutboxMock is a mock implementation of event.Outbox.
//
//	func TestSomethingThatUsesOutbox(t *testing.T) {
//
//		// make and configure a mocked event.Outbox
//		mockedOutbox := &OutboxMock{
//			StageFunc: func(ctx context.Context, tx T, records []*event.Record) error {
//				panic("mock out the Stage method")
//			},
//		}
//
//		// use mockedOutbox in code that requires event.Outbox
//		// and then make assertions.
//
//	}
type OutboxMock[T any] struct {
	// StageFunc mocks the Stage method.
	StageFunc func(ctx context.Context, tx T, records []*event.Record) error

	// calls tracks calls to the methods.
	calls struct {
		// Stage holds details about calls to the Stage method.
		Stage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx T
			// Records is the records argument value.
			Records []*event.Record
		}
	}
	lockStage sync.RWMutex
}

// Stage calls StageFunc.
func (mock *OutboxMock[T]) Stage(ctx context.Context, tx T, records []*event.Record) error {
	if mock.StageFunc == nil {
		panic("OutboxMock.StageFunc: method is nil but Outbox.Stage was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Tx      T
		Records []*event.Record
	}{
		Ctx:     ctx,
		Tx:      tx,
		Records: records,
	}
	mock.lockStage.Lock()
	mock.calls.Stage = append(mock.calls.Stage, callInfo)
	mock.lockStage.Unlock()
	return mock.StageFunc(ctx, tx, records)
}

// StageCalls gets all the calls that were made to Stage.
// Check the length with:
//
//	len(mockedOutbox.StageCalls())
func (mock *OutboxMock[T]) StageCalls() []struct {
	Ctx     context.Context
	Tx      T
	Records []*event.Record
} {
	var calls []struct {
		Ctx     context.Context
		Tx      T
		Records []*event.Record
	}
	mock.lockStage.RLock()
	calls = mock.calls.Stage
	mock.lockStage.RUnlock()
	return calls
}

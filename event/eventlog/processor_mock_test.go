// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eventlog_test

import (
	"context"
	"github.com/DeluxeOwl/chronicle/event"
	"sync"
)

// TransactionalProcessorMock is a mock implementation of event.TransactionalProcessor.
//
//	func TestSomethingThatUsesTransactionalProcessor(t *testing.T) {
//
//		// make and configure a mocked event.TransactionalProcessor
//		mockedTransactionalProcessor := &TransactionalProcessorMock{
//			ProcessRecordsFunc: func(ctx context.Context, tx TX, records []*event.Record) error {
//				panic("mock out the ProcessRecords method")
//			},
//		}
//
//		// use mockedTransactionalProcessor in code that requires event.TransactionalProcessor
//		// and then make assertions.
//
//	}
type TransactionalProcessorMock[TX any] struct {
	// ProcessRecordsFunc mocks the ProcessRecords method.
	ProcessRecordsFunc func(ctx context.Context, tx TX, records []*event.Record) error

	// calls tracks calls to the methods.
	calls struct {
		// ProcessRecords holds details about calls to the ProcessRecords method.
		ProcessRecords []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx TX
			// Records is the records argument value.
			Records []*event.Record
		}
	}
	lockProcessRecords sync.RWMutex
}

// ProcessRecords calls ProcessRecordsFunc.
func (mock *TransactionalProcessorMock[TX]) ProcessRecords(ctx context.Context, tx TX, records []*event.Record) error {
	if mock.ProcessRecordsFunc == nil {
		panic("TransactionalProcessorMock.ProcessRecordsFunc: method is nil but TransactionalProcessor.ProcessRecords was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Tx      TX
		Records []*event.Record
	}{
		Ctx:     ctx,
		Tx:      tx,
		Records: records,
	}
	mock.lockProcessRecords.Lock()
	mock.calls.ProcessRecords = append(mock.calls.ProcessRecords, callInfo)
	mock.lockProcessRecords.Unlock()
	return mock.ProcessRecordsFunc(ctx, tx, records)
}

// ProcessRecordsCalls gets all the calls that were made to ProcessRecords.
// Check the length with:
//
//	len(mockedTransactionalProcessor.ProcessRecordsCalls())
func (mock *TransactionalProcessorMock[TX]) ProcessRecordsCalls() []struct {
	Ctx     context.Context
	Tx      TX
	Records []*event.Record
} {
	var calls []struct {
		Ctx     context.Context
		Tx      TX
		Records []*event.Record
	}
	mock.lockProcessRecords.RLock()
	calls = mock.calls.ProcessRecords
	mock.lockProcessRecords.RUnlock()
	return calls
}

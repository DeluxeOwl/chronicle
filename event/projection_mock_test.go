// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package event_test

import (
	"context"
	"github.com/DeluxeOwl/chronicle/event"
	"github.com/DeluxeOwl/chronicle/version"
	"sync"
)

// CheckpointerMock is a mock implementation of event.Checkpointer.
//
//	func TestSomethingThatUsesCheckpointer(t *testing.T) {
//
//		// make and configure a mocked event.Checkpointer
//		mockedCheckpointer := &CheckpointerMock{
//			GetCheckpointFunc: func(ctx context.Context, projectionName string) (version.Version, error) {
//				panic("mock out the GetCheckpoint method")
//			},
//			SaveCheckpointFunc: func(ctx context.Context, projectionName string, v version.Version) error {
//				panic("mock out the SaveCheckpoint method")
//			},
//		}
//
//		// use mockedCheckpointer in code that requires event.Checkpointer
//		// and then make assertions.
//
//	}
type CheckpointerMock struct {
	// GetCheckpointFunc mocks the GetCheckpoint method.
	GetCheckpointFunc func(ctx context.Context, projectionName string) (version.Version, error)

	// SaveCheckpointFunc mocks the SaveCheckpoint method.
	SaveCheckpointFunc func(ctx context.Context, projectionName string, v version.Version) error

	// calls tracks calls to the methods.
	calls struct {
		// GetCheckpoint holds details about calls to the GetCheckpoint method.
		GetCheckpoint []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectionName is the projectionName argument value.
			ProjectionName string
		}
		// SaveCheckpoint holds details about calls to the SaveCheckpoint method.
		SaveCheckpoint []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectionName is the projectionName argument value.
			ProjectionName string
			// V is the v argument value.
			V version.Version
		}
	}
	lockGetCheckpoint  sync.RWMutex
	lockSaveCheckpoint sync.RWMutex
}

// GetCheckpoint calls GetCheckpointFunc.
func (mock *CheckpointerMock) GetCheckpoint(ctx context.Context, projectionName string) (version.Version, error) {
	if mock.GetCheckpointFunc == nil {
		panic("CheckpointerMock.GetCheckpointFunc: method is nil but Checkpointer.GetCheckpoint was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		ProjectionName string
	}{
		Ctx:            ctx,
		ProjectionName: projectionName,
	}
	mock.lockGetCheckpoint.Lock()
	mock.calls.GetCheckpoint = append(mock.calls.GetCheckpoint, callInfo)
	mock.lockGetCheckpoint.Unlock()
	return mock.GetCheckpointFunc(ctx, projectionName)
}

// GetCheckpointCalls gets all the calls that were made to GetCheckpoint.
// Check the length with:
//
//	len(mockedCheckpointer.GetCheckpointCalls())
func (mock *CheckpointerMock) GetCheckpointCalls() []struct {
	Ctx            context.Context
	ProjectionName string
} {
	var calls []struct {
		Ctx            context.Context
		ProjectionName string
	}
	mock.lockGetCheckpoint.RLock()
	calls = mock.calls.GetCheckpoint
	mock.lockGetCheckpoint.RUnlock()
	return calls
}

// SaveCheckpoint calls SaveCheckpointFunc.
func (mock *CheckpointerMock) SaveCheckpoint(ctx context.Context, projectionName string, v version.Version) error {
	if mock.SaveCheckpointFunc == nil {
		panic("CheckpointerMock.SaveCheckpointFunc: method is nil but Checkpointer.SaveCheckpoint was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		ProjectionName string
		V              version.Version
	}{
		Ctx:            ctx,
		ProjectionName: projectionName,
		V:              v,
	}
	mock.lockSaveCheckpoint.Lock()
	mock.calls.SaveCheckpoint = append(mock.calls.SaveCheckpoint, callInfo)
	mock.lockSaveCheckpoint.Unlock()
	return mock.SaveCheckpointFunc(ctx, projectionName, v)
}

// SaveCheckpointCalls gets all the calls that were made to SaveCheckpoint.
// Check the length with:
//
//	len(mockedCheckpointer.SaveCheckpointCalls())
func (mock *CheckpointerMock) SaveCheckpointCalls() []struct {
	Ctx            context.Context
	ProjectionName string
	V              version.Version
} {
	var calls []struct {
		Ctx            context.Context
		ProjectionName string
		V              version.Version
	}
	mock.lockSaveCheckpoint.RLock()
	calls = mock.calls.SaveCheckpoint
	mock.lockSaveCheckpoint.RUnlock()
	return calls
}

// AsyncProjectionMock is a mock implementation of event.AsyncProjection.
//
//	func TestSomethingThatUsesAsyncProjection(t *testing.T) {
//
//		// make and configure a mocked event.AsyncProjection
//		mockedAsyncProjection := &AsyncProjectionMock{
//			HandleFunc: func(ctx context.Context, rec *event.GlobalRecord) error {
//				panic("mock out the Handle method")
//			},
//			MatchesEventFunc: func(eventName string) bool {
//				panic("mock out the MatchesEvent method")
//			},
//		}
//
//		// use mockedAsyncProjection in code that requires event.AsyncProjection
//		// and then make assertions.
//
//	}
type AsyncProjectionMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context, rec *event.GlobalRecord) error

	// MatchesEventFunc mocks the MatchesEvent method.
	MatchesEventFunc func(eventName string) bool

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Rec is the rec argument value.
			Rec *event.GlobalRecord
		}
		// MatchesEvent holds details about calls to the MatchesEvent method.
		MatchesEvent []struct {
			// EventName is the eventName argument value.
			EventName string
		}
	}
	lockHandle       sync.RWMutex
	lockMatchesEvent sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *AsyncProjectionMock) Handle(ctx context.Context, rec *event.GlobalRecord) error {
	if mock.HandleFunc == nil {
		panic("AsyncProjectionMock.HandleFunc: method is nil but AsyncProjection.Handle was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Rec *event.GlobalRecord
	}{
		Ctx: ctx,
		Rec: rec,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(ctx, rec)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//
//	len(mockedAsyncProjection.HandleCalls())
func (mock *AsyncProjectionMock) HandleCalls() []struct {
	Ctx context.Context
	Rec *event.GlobalRecord
} {
	var calls []struct {
		Ctx context.Context
		Rec *event.GlobalRecord
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}

// MatchesEvent calls MatchesEventFunc.
func (mock *AsyncProjectionMock) MatchesEvent(eventName string) bool {
	if mock.MatchesEventFunc == nil {
		panic("AsyncProjectionMock.MatchesEventFunc: method is nil but AsyncProjection.MatchesEvent was just called")
	}
	callInfo := struct {
		EventName string
	}{
		EventName: eventName,
	}
	mock.lockMatchesEvent.Lock()
	mock.calls.MatchesEvent = append(mock.calls.MatchesEvent, callInfo)
	mock.lockMatchesEvent.Unlock()
	return mock.MatchesEventFunc(eventName)
}

// MatchesEventCalls gets all the calls that were made to MatchesEvent.
// Check the length with:
//
//	len(mockedAsyncProjection.MatchesEventCalls())
func (mock *AsyncProjectionMock) MatchesEventCalls() []struct {
	EventName string
} {
	var calls []struct {
		EventName string
	}
	mock.lockMatchesEvent.RLock()
	calls = mock.calls.MatchesEvent
	mock.lockMatchesEvent.RUnlock()
	return calls
}
